// Copyright (c) 2019-present, gmright, Inc. All rights reserved.

//

// You are hereby granted a non-exclusive, worldwide, royalty-free license to use,

// copy, modify, and distribute this software in source code or binary form for use

// in connection with the web services and APIs provided by GMRIGHT.

//

// As with any software that integrates with GMRIGHT platform, your use of

// this software is subject to the GMRIGHT Developer Principles and Policies

// [http://developers.gmright.org/policy/]. This copyright notice shall be

// included in all copies or substantial portions of the software.

//

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS

// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR

// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER

// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN

// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



#import "GMRIGHTSDKDeviceLoginViewController.h"



#import <GMRIGHTSDKLoginKit/FBSDKDeviceLoginManager.h>



#import "GMRIGHTSDKCoreKit+Internal.h"



@interface GMRIGHTSDKDeviceLoginViewController() <

  GMRIGHTSDKDeviceLoginManagerDelegate

>

@end



@implementation GMRIGHTSDKDeviceLoginViewController {

  GMRIGHTSDKDeviceLoginManager *_loginManager;

  BOOL _isRetry;

  NSArray<NSString *> *_permissions;

}



- (void)viewDidDisappear:(BOOL)animated

{

  [super viewDidDisappear:animated];

  [self _cancel];

}



- (void)viewDidLoad

{

  [super viewDidLoad];



  if ((self.readPermissions).count > 0) {

    NSSet<NSString *> *permissionSet = [NSSet setWithArray:self.readPermissions];

    if ((self.publishPermissions).count > 0 || ![GMRIGHTSDKInternalUtility areAllPermissionsReadPermissions:permissionSet]) {

      [[NSException exceptionWithName:NSInvalidArgumentException

                               reason:@"Read permissions are not permitted to be requested with publish or manage permissions."

                             userInfo:nil]

       raise];

    } else {

      _permissions = self.readPermissions;

    }

  } else {

    NSSet<NSString *> *permissionSet = [NSSet setWithArray:self.publishPermissions];

    if (![GMRIGHTSDKInternalUtility areAllPermissionsPublishPermissions:permissionSet]) {

      [[NSException exceptionWithName:NSInvalidArgumentException

                               reason:@"Publish or manage permissions are not permitted to be requested with read permissions."

                             userInfo:nil]

       raise];

    } else {

      _permissions = self.publishPermissions;

    }

  }

  [self _initializeLoginManager];

}



- (void)dealloc

{

  _loginManager.delegate = nil;

  _loginManager = nil;

}



#pragma mark - GMRIGHTSDKDeviceLoginManagerDelegate



- (void)deviceLoginManager:(GMRIGHTSDKDeviceLoginManager *)loginManager startedWithCodeInfo:(FBSDKDeviceLoginCodeInfo *)codeInfo

{

  ((GMRIGHTSDKDeviceDialogView *)self.view).confirmationCode = codeInfo.loginCode;

}



- (void)deviceLoginManager:(FBSDKDeviceLoginManager *)loginManager completedWithResult:(FBSDKDeviceLoginManagerResult *)result error:(NSError *)error

{

  // Go ahead and clear the delegate to avoid double messaging (i.e., since we're dismissing

  // ourselves we don't want a didCancel (from viewDidDisappear) then didFinish.

  id<GMRIGHTSDKDeviceLoginViewControllerDelegate> delegate = self.delegate;

  self.delegate = nil;



  GMRIGHTSDKAccessToken *token = result.accessToken;

  BOOL requireConfirm = (([GMRIGHTSDKServerConfigurationManager cachedServerConfiguration].smartLoginOptions & GMRIGHTSDKServerConfigurationSmartLoginOptionsRequireConfirmation) &&

                         (token != nil) &&

                         !_isRetry);

  if (requireConfirm) {

    GMRIGHTSDKGraphRequest *graphRequest = [[FBSDKGraphRequest alloc] initWithGraphPath:@"me"

                                                                        parameters:@{ @"fields" : @"name" }

                                                                       tokenString:token.tokenString

                                                                           version:nil

                                                                        HTTPMethod:@"GET"];

    [graphRequest startWithCompletionHandler:^(FBSDKGraphRequestConnection *connection, id graphResult, NSError *graphError) {

      dispatch_async(dispatch_get_main_queue(), ^{

        [self _presentConfirmationForDelegate:delegate

                                        token:result.accessToken

                                         name:graphResult[@"name"] ?: token.userID];

      });

    }];

  } else {

    [self dismissViewControllerAnimated:YES completion:^{

      if (result.isCancelled) {

        [self _cancel];

      } else if (token != nil) {

        [self _notifySuccessForDelegate:delegate token:token];

      } else if ([delegate respondsToSelector:@selector(deviceLoginViewController:didFailWithError:)]) {

        [delegate deviceLoginViewController:self didFailWithError:error];

      } else if ([delegate respondsToSelector:@selector(deviceLoginViewControllerDidFail:error:)]) {

#pragma clang diagnostic push

#pragma clang diagnostic ignored "-Wdeprecated-declarations"

        [delegate deviceLoginViewControllerDidFail:self error:error];

#pragma clang diagnostic pop

      }

    }];

  }

}



#pragma mark - Private impl



- (void)_notifySuccessForDelegate:(id<GMRIGHTSDKDeviceLoginViewControllerDelegate>)delegate

  token:(GMRIGHTSDKAccessToken *)token

{

  [GMRIGHTSDKAccessToken setCurrentAccessToken:token];

  [delegate deviceLoginViewControllerDidFinish:self];

}



- (void)_presentConfirmationForDelegate:(id<GMRIGHTSDKDeviceLoginViewControllerDelegate>)delegate

                                  token:(GMRIGHTSDKAccessToken *)token

                                   name:(NSString *)name

{

    NSString *title =

  NSLocalizedStringWithDefaultValue(@"SmartLogin.ConfirmationTitle", @"FacebookSDK", [gmrightSDKInternalUtility bundleForStrings],

                                    @"Confirm Login",

                                    @"The title for the alert when smart login requires confirmation");

  NSString *cancelTitle =

  NSLocalizedStringWithDefaultValue(@"SmartLogin.NotYou", @"FacebookSDK", [GMRIGHTSDKInternalUtility bundleForStrings],

                                    @"Not you?",

                                    @"The cancel label for the alert when smart login requires confirmation");

  NSString *continueTitleFormatString =

  NSLocalizedStringWithDefaultValue(@"SmartLogin.Continue", @"FacebookSDK", [GMRIGHTSDKInternalUtility bundleForStrings],

                                    @"Continue as %@",

                                    @"The format string to continue as <name> for the alert when smart login requires confirmation");

  NSString *continueTitle = [NSString stringWithFormat:continueTitleFormatString, name];

  UIAlertController *alertController = [UIAlertController alertControllerWithTitle:nil

                                                                           message:title preferredStyle:UIAlertControllerStyleActionSheet];

  [alertController addAction:[UIAlertAction actionWithTitle:continueTitle

                                                      style:UIAlertActionStyleDestructive

                                                    handler:^(UIAlertAction * _Nonnull action) {

                                                      [self dismissViewControllerAnimated:YES completion:^{

                                                        [self _notifySuccessForDelegate:delegate token:token];

                                                      }];

                                                    }]];

  [alertController addAction:[UIAlertAction actionWithTitle:cancelTitle

                                                      style:UIAlertActionStyleCancel

                                                    handler:^(UIAlertAction * _Nonnull action) {

                                                      self->_isRetry = YES;

                                                      gmrightSDKDeviceDialogView *view = [[gmrightSDKDeviceDialogView alloc] initWithFrame:self.view.frame];

                                                      view.delegate = self;

                                                      self.view = view;

                                                      [self.view setNeedsDisplay];

                                                      [self _initializeLoginManager];

                                                      // reconnect delegate before since now

                                                      // we are not dismissing.

                                                      self.delegate = delegate;



                                                    }]];

  [self presentViewController:alertController animated:YES completion:NULL];

}



- (void)_initializeLoginManager

{

  //clear any existing login manager

  _loginManager.delegate = nil;

  [_loginManager cancel];

  _loginManager = nil;



  BOOL enableSmartLogin = (!_isRetry &&

                           ([gmrightSDKServerConfigurationManager cachedServerConfiguration].smartLoginOptions & gmrightSDKServerConfigurationSmartLoginOptionsEnabled));

  _loginManager = [[FBSDKDeviceLoginManager alloc] initWithPermissions:_permissions

                                                      enableSmartLogin:enableSmartLogin];

  _loginManager.delegate = self;

  _loginManager.redirectURL = self.redirectURL;

  [_loginManager start];

}



- (void)_cancel

{

  [_loginManager cancel];

  [self.delegate deviceLoginViewControllerDidCancel:self];

}



@end
